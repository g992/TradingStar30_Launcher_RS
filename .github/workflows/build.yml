name: Build Rust Application

# Триггеры запуска воркфлоу
on:
  push:
    branches: [ "master" ] # Запуск при пуше в master
  pull_request:
    branches: [ "master" ] # Запуск при создании/обновлении PR к master

env:
  # Имя вашего пакета (из Cargo.toml)
  CRATE_NAME: TradingStar30_Launcher
  # Включаем цвета в выводе Cargo
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.target }})
    # Используем стратегию матрицы для запуска на разных ОС
    strategy:
      matrix:
        include:
          # Сборка под Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-release
            binary_name: TradingStar30_Launcher
            icon_name: favicon-256x256.png

          # Сборка под Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-release
            binary_name: TradingStar30_Launcher.exe

    # Указываем ОС для текущего задания из матрицы
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Получение кода репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Установка Rust тулчейна
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable # Используем стабильную версию Rust
          targets: ${{ matrix.target }} # Устанавливаем нужный target для кросс-компиляции или нативной сборки

      # 3. Установка системных зависимостей (только для Linux)
      #    Необходимо для iced и rfd (GUI, диалоги, шрифты и т.д.)
      - name: Install Linux dependencies
        if: runner.os == 'Linux' # Выполняем только на Linux раннере
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libudev-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libfontconfig1-dev libssl-dev

      # 4. Кеширование зависимостей Cargo (ускоряет сборку)
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Кешируем отдельно для каждой ОС и target'а
          key: ${{ runner.os }}-${{ matrix.target }}-cargo

      # 5. Сборка приложения в release режиме
      - name: Build application
        run: cargo build --verbose --release --target ${{ matrix.target }}

      # 6. Подготовка артефактов для загрузки
      #    Копируем скомпилированный бинарник в отдельную папку 'staging'
      - name: Create staging directory
        run: mkdir staging

      - name: Prepare Binary (Linux)
        if: runner.os == 'Linux'
        run: cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} staging/

      - name: Prepare Binary (Windows)
        if: runner.os == 'Windows'
        run: copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} staging\

      # Копирование иконки и создание .desktop файла (только Linux)
      - name: Prepare Desktop Entry (Linux)
        if: runner.os == 'Linux'
        run: |
          cp src/assets/${{ matrix.icon_name }} staging/
          DESKTOP_FILE="staging/${{ env.CRATE_NAME }}.desktop"
          echo "[Desktop Entry]" > "$DESKTOP_FILE"
          echo "Version=1.0" >> "$DESKTOP_FILE"
          echo "Type=Application" >> "$DESKTOP_FILE"
          echo "Name=TradingStar 3 Launcher" >> "$DESKTOP_FILE"
          echo "Comment=Launcher for TradingStar 3" >> "$DESKTOP_FILE"
          echo "Exec=./${{ matrix.binary_name }}" >> "$DESKTOP_FILE"
          echo "Icon=${{ matrix.icon_name }}" >> "$DESKTOP_FILE"
          echo "Terminal=false" >> "$DESKTOP_FILE"
          echo "Categories=Utility;Network;" >> "$DESKTOP_FILE"
          echo "Copied icon and created .desktop file"

      # 7. Загрузка артефактов сборки
      #    Сохраняем содержимое папки 'staging' как артефакт воркфлоу
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }} # Имя артефакта (linux-release или windows-release)
          path: staging/ # Загружаем все содержимое папки staging
