name: Build and Release Rust Application

# Триггеры запуска воркфлоу
on:
  push:
    branches: [ "master" ] # Запуск при пуше в master
  pull_request:
    branches: [ "master" ] # Запуск при создании/обновлении PR к master

env:
  # Имя вашего пакета (из Cargo.toml)
  CRATE_NAME: TradingStar30_Launcher
  # Включаем цвета в выводе Cargo
  CARGO_TERM_COLOR: always

# Разрешения для GitHub Token
permissions:
  contents: read # По умолчанию читаем контент

jobs:
  create_release:
    name: Create Release Draft
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Запускаем только при пуше в master
    runs-on: ubuntu-latest
    permissions:
      contents: write # Нужно право на запись для создания релиза
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # Передаем URL для загрузки ассетов
      release_id: ${{ steps.create_release.outputs.id }} # Передаем ID релиза
      release_tag: ${{ steps.get_next_tag.outputs.next_tag }} # Передаем вычисленный тег
    steps:
      # Шаг для вычисления следующего тега версии
      - name: Get next release tag
        id: get_next_tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            let nextTag = 'v0.1.0'; // Версия по умолчанию

            try {
              // Получаем самый последний опубликованный релиз
              const latestRelease = await github.rest.repos.getLatestRelease({ owner, repo });
              const latestTag = latestRelease.data.tag_name;
              console.log(`Latest published release tag: ${latestTag}`);

              // Ищем тег в формате v0.<число>.число
              const tagRegex = /^v0\.(\d+)\.\d+$/;
              const match = latestTag.match(tagRegex);

              if (match) {
                const currentMinor = parseInt(match[1], 10);
                const nextMinor = currentMinor + 1;
                nextTag = `v0.${nextMinor}.0`; // Увеличиваем минорную, патч = 0
                console.log(`Calculated next tag: ${nextTag}`);
              } else {
                console.log(`Latest tag '${latestTag}' does not match v0.x.y format. Using default ${nextTag}.`);
              }
            } catch (error) {
              // Если релиза нет (404), используем версию по умолчанию
              if (error.status === 404) {
                console.log('No previous published releases found. Using default tag v0.1.0.');
              } else {
                // При других ошибках прерываем работу
                console.error('Error fetching latest release:', error);
                core.setFailed(`Failed to get latest release: ${error.message}`);
                return;
              }
            }
            // Передаем вычисленный тег в output шага
            core.setOutput('next_tag', nextTag);

      - name: Create Release Draft
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Используем вычисленный тег
          tag_name: ${{ steps.get_next_tag.outputs.next_tag }}
          # Имя релиза теперь включает версию
          release_name: Release ${{ steps.get_next_tag.outputs.next_tag }}
          # Исправляем многострочный body
          body: |
            Автоматически сгенерированный релиз для коммита ${{ github.sha }}.

            **Важно:** Это черновик релиза. Отредактируйте описание при необходимости и опубликуйте вручную.
          draft: true # Создаем как черновик
          prerelease: false # Не пре-релиз

  build_release_assets:
    name: Build Release Asset (${{ matrix.os }})
    needs: create_release # Запускаем после создания черновика релиза
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    permissions:
      contents: write
    env:
      # Получаем тег релиза из предыдущей джобы
      RELEASE_TAG: ${{ needs.create_release.outputs.release_tag }}
      # BRANCH_NAME и SHORT_SHA больше не нужны для имен ассетов
      # BRANCH_NAME: ${{ github.ref_name }}
      # SHORT_SHA: $(echo ${{ github.sha }} | cut -c1-7)
    strategy:
      matrix:
        include:
          # Сборка под Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_suffix: linux-x86_64
            binary_name: TradingStar30_Launcher
            icon_name: favicon-256x256.png

          # Сборка под Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_suffix: windows-x86_64
            binary_name: TradingStar30_Launcher.exe
            icon_name: null # Нет иконки/desktop файла для Windows в этом workflow

    runs-on: ${{ matrix.os }}
    steps:
      # 1. Получение кода репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Установка Rust тулчейна
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      # 3. Установка системных зависимостей (только для Linux)
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgtk-3-dev libudev-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libfontconfig1-dev libssl-dev

      # 4. Кеширование зависимостей Cargo
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release

      # 5. Сборка приложения в release режиме
      - name: Build application
        run: cargo build --verbose --release --target ${{ matrix.target }}

      # 6. Подготовка артефактов для загрузки в релиз
      - name: Create staging directory
        run: mkdir staging

      - name: Prepare Binary (Linux)
        if: runner.os == 'Linux'
        run: cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} staging/

      - name: Prepare Binary (Windows)
        if: runner.os == 'Windows'
        run: copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} staging\

      - name: Prepare Desktop Entry & Icon (Linux)
        if: runner.os == 'Linux'
        run: |
          cp src/assets/${{ matrix.icon_name }} staging/
          DESKTOP_FILE="staging/${{ env.CRATE_NAME }}.desktop"
          echo "[Desktop Entry]" > "$DESKTOP_FILE"
          echo "Version=1.0" >> "$DESKTOP_FILE"
          echo "Type=Application" >> "$DESKTOP_FILE"
          echo "Name=TradingStar 3 Launcher" >> "$DESKTOP_FILE"
          echo "Comment=Launcher for TradingStar 3" >> "$DESKTOP_FILE"
          echo "Exec=./${{ matrix.binary_name }}" >> "$DESKTOP_FILE"
          echo "Icon=${{ matrix.icon_name }}" >> "$DESKTOP_FILE"
          echo "Terminal=false" >> "$DESKTOP_FILE"
          echo "Categories=Utility;Network;" >> "$DESKTOP_FILE"
          echo "Copied icon and created .desktop file"

      # 7. Загрузка ассетов в релиз (только при пуше в master)
      - name: Upload Binary Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Загружаем только для пуша в master
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: staging/${{ matrix.binary_name }}
          # Имя ассета теперь использует тег версии и корректно добавляет .exe для Windows
          asset_name: ${{ env.CRATE_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.platform_suffix }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      - name: Upload Desktop File (Linux)
        if: runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/master' # Загружаем только для пуша в master на Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: staging/${{ env.CRATE_NAME }}.desktop
          asset_name: ${{ env.CRATE_NAME }}.desktop
          asset_content_type: application/x-desktop

      - name: Upload Icon File (Linux)
        if: runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/master' # Загружаем только для пуша в master на Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: staging/${{ matrix.icon_name }}
          asset_name: ${{ matrix.icon_name }}
          asset_content_type: image/png
